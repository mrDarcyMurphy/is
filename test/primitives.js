var assert = require('assert')
var is = require('../lib/is')
var fn = function(){}

describe('primitives', function(){

  it('array', function(){
    assert.equal(false, is.array(fn))
    assert.equal(false, is.array(new Date()))
    assert.equal(false, is.array(undefined))
    assert.equal(false, is.array(NaN))
    assert.equal(false, is.array(null))
    assert.equal(false, is.array(true))
    assert.equal(false, is.array(false))
    assert.equal(false, is.array(new Object()))
    assert.equal(false, is.array({}))
    assert.equal(false, is.array({foo:'bar'}))
    assert.equal(true , is.array(new Array()))
    assert.equal(true , is.array([]))
    assert.equal(false, is.array(""))
    assert.equal(false, is.array("   "))
    assert.equal(false, is.array("asdf"))
    assert.equal(false, is.array(1.23))
    assert.equal(false, is.array(-42))
    assert.equal(false, is.array(-1))
    assert.equal(false, is.array(0))
    assert.equal(false, is.array(666))
  })

  it('boolean', function(){
    assert.equal(false, is.boolean(fn))
    assert.equal(false, is.boolean(new Date()))
    assert.equal(false, is.boolean(undefined))
    assert.equal(false, is.boolean(NaN))
    assert.equal(false, is.boolean(null))
    assert.equal(true,  is.boolean(true))
    assert.equal(true,  is.boolean(false))
    assert.equal(false, is.boolean(new Object()))
    assert.equal(false, is.boolean({}))
    assert.equal(false, is.boolean({foo:'bar'}))
    assert.equal(false, is.boolean(new Array()))
    assert.equal(false, is.boolean([]))
    assert.equal(false, is.boolean(""))
    assert.equal(false, is.boolean("   "))
    assert.equal(false, is.boolean("asdf"))
    assert.equal(false, is.boolean(1.23))
    assert.equal(false, is.boolean(-42))
    assert.equal(false, is.boolean(-1))
    assert.equal(false, is.boolean(0))
    assert.equal(false, is.boolean(666)) // :metal:
  })

  it('func', function(){
    assert.equal(true , is.func(fn))
    assert.equal(false, is.func(new Date()))
    assert.equal(false, is.func(undefined))
    assert.equal(false, is.func(NaN))
    assert.equal(false, is.func(null))
    assert.equal(false, is.func(true))
    assert.equal(false, is.func(false))
    assert.equal(false, is.func(new Object()))
    assert.equal(false, is.func({}))
    assert.equal(false, is.func({foo:'bar'}))
    assert.equal(false, is.func(new Array()))
    assert.equal(false, is.func([]))
    assert.equal(false, is.func(""))
    assert.equal(false, is.func("   "))
    assert.equal(false, is.func("asdf"))
    assert.equal(false, is.func(1.23))
    assert.equal(false, is.func(-42))
    assert.equal(false, is.func(-1))
    assert.equal(false, is.func(0))
    assert.equal(false, is.func(666)) // :metal:
  })

  it('nil', function(){
    assert.equal(false, is.nil(fn))
    assert.equal(false, is.nil(new Date()))
    assert.equal(false, is.nil(undefined))
    assert.equal(false, is.nil(NaN))
    assert.equal(true , is.nil(null))
    assert.equal(false, is.nil(true))
    assert.equal(false, is.nil(false))
    assert.equal(false, is.nil(new Object()))
    assert.equal(false, is.nil({}))
    assert.equal(false, is.nil({foo:'bar'}))
    assert.equal(false, is.nil(new Array()))
    assert.equal(false, is.nil([]))
    assert.equal(false, is.nil(""))
    assert.equal(false, is.nil("   "))
    assert.equal(false, is.nil("asdf"))
    assert.equal(false, is.nil(1.23))
    assert.equal(false, is.nil(-42))
    assert.equal(false, is.nil(-1))
    assert.equal(false, is.nil(0))
    assert.equal(false, is.nil(666)) // :metal:
  })

  it('undef', function(){
    assert.equal(false, is.undef(fn))
    assert.equal(false, is.undef(new Date()))
    assert.equal(true , is.undef(undefined))
    assert.equal(false, is.undef(NaN))
    assert.equal(false, is.undef(null))
    assert.equal(false, is.undef(true))
    assert.equal(false, is.undef(false))
    assert.equal(false, is.undef(new Object()))
    assert.equal(false, is.undef({}))
    assert.equal(false, is.undef({foo:'bar'}))
    assert.equal(false, is.undef(new Array()))
    assert.equal(false, is.undef([]))
    assert.equal(false, is.undef(""))
    assert.equal(false, is.undef("   "))
    assert.equal(false, is.undef("asdf"))
    assert.equal(false, is.undef(1.23))
    assert.equal(false, is.undef(-42))
    assert.equal(false, is.undef(-1))
    assert.equal(false, is.undef(0))
    assert.equal(false, is.undef(666)) // :metal:
  })

  it('present', function(){
    assert.equal(true , is.present(fn))
    assert.equal(true , is.present(new Date()))
    assert.equal(false, is.present(undefined))
    assert.equal(true , is.present(NaN))
    assert.equal(false, is.present(null))
    assert.equal(true , is.present(true))
    assert.equal(true , is.present(false))
    assert.equal(true , is.present(new Object()))
    assert.equal(true , is.present({}))
    assert.equal(true , is.present({foo:'bar'}))
    assert.equal(true , is.present(new Array()))
    assert.equal(true , is.present([]))
    assert.equal(false, is.present(""))
    assert.equal(false, is.present("   ")) // according to is, this is an empty string
    assert.equal(true , is.present("asdf"))
    assert.equal(true , is.present(1.23))
    assert.equal(true , is.present(-42))
    assert.equal(true , is.present(-1))
    assert.equal(true , is.present(0))
    assert.equal(true , is.present(666)) // :metal:

    assert.equal(false, is.present(is.toNum("asdf")))
    assert.equal(true , is.present(is.int("asdf"))) // NaN is technically "present"
    assert.equal(false, (is.present("asdf") && is.int("asdf"))) // this is probably how you'd do it, two checks, not one
  })


})
