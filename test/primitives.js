var assert = require('assert')
var is = require('../lib/is')
var fn = function(){}

describe('primitives', function(){

  it('array', function(){
    assert.equal(false, is.array(fn))
    assert.equal(false, is.array(new Date))
    assert.equal(false, is.array(undefined))
    assert.equal(false, is.array(NaN))
    assert.equal(false, is.array(null))
    assert.equal(false, is.array(true))
    assert.equal(false, is.array(false))
    assert.equal(false, is.array(new Object()))
    assert.equal(false, is.array({}))
    assert.equal(false, is.array({foo:'bar'}))
    assert.equal(true , is.array(new Array()))
    assert.equal(true , is.array([]))
    assert.equal(false, is.array(""))
    assert.equal(false, is.array("   "))
    assert.equal(false, is.array("asdf"))
    assert.equal(false, is.array(1.23))
    assert.equal(false, is.array(-42))
    assert.equal(false, is.array(-1))
    assert.equal(false, is.array(0))
    assert.equal(false, is.array(666))
  })

  it('boolean', function(){
    assert.equal(false, is.boolean(fn))
    assert.equal(false, is.boolean(new Date))
    assert.equal(false, is.boolean(undefined))
    assert.equal(false, is.boolean(NaN))
    assert.equal(false, is.boolean(null))
    assert.equal(true,  is.boolean(true))
    assert.equal(true,  is.boolean(false))
    assert.equal(false, is.boolean(new Object()))
    assert.equal(false, is.boolean({}))
    assert.equal(false, is.boolean({foo:'bar'}))
    assert.equal(false, is.boolean(new Array()))
    assert.equal(false, is.boolean([]))
    assert.equal(false, is.boolean(""))
    assert.equal(false, is.boolean("   "))
    assert.equal(false, is.boolean("asdf"))
    assert.equal(false, is.boolean(1.23))
    assert.equal(false, is.boolean(-42))
    assert.equal(false, is.boolean(-1))
    assert.equal(false, is.boolean(0))
    assert.equal(false, is.boolean(666)) // :metal:
  })

  it('function', function(){
    assert.equal(true , is.function(fn))
    assert.equal(false, is.function(new Date))
    assert.equal(false, is.function(undefined))
    assert.equal(false, is.function(NaN))
    assert.equal(false, is.function(null))
    assert.equal(false, is.function(true))
    assert.equal(false, is.function(false))
    assert.equal(false, is.function(new Object()))
    assert.equal(false, is.function({}))
    assert.equal(false, is.function({foo:'bar'}))
    assert.equal(false, is.function(new Array()))
    assert.equal(false, is.function([]))
    assert.equal(false, is.function(""))
    assert.equal(false, is.function("   "))
    assert.equal(false, is.function("asdf"))
    assert.equal(false, is.function(1.23))
    assert.equal(false, is.function(-42))
    assert.equal(false, is.function(-1))
    assert.equal(false, is.function(0))
    assert.equal(false, is.function(666)) // :metal:
  })

  it('null', function(){
    assert.equal(false, is.null(fn))
    assert.equal(false, is.null(new Date))
    assert.equal(false, is.null(undefined))
    assert.equal(false, is.null(NaN))
    assert.equal(true , is.null(null))
    assert.equal(false, is.null(true))
    assert.equal(false, is.null(false))
    assert.equal(false, is.null(new Object()))
    assert.equal(false, is.null({}))
    assert.equal(false, is.null({foo:'bar'}))
    assert.equal(false, is.null(new Array()))
    assert.equal(false, is.null([]))
    assert.equal(false, is.null(""))
    assert.equal(false, is.null("   "))
    assert.equal(false, is.null("asdf"))
    assert.equal(false, is.null(1.23))
    assert.equal(false, is.null(-42))
    assert.equal(false, is.null(-1))
    assert.equal(false, is.null(0))
    assert.equal(false, is.null(666)) // :metal:
  })

  it('undefined', function(){
    assert.equal(false, is.undefined(fn))
    assert.equal(false, is.undefined(new Date))
    assert.equal(true , is.undefined(undefined))
    assert.equal(false, is.undefined(NaN))
    assert.equal(false, is.undefined(null))
    assert.equal(false, is.undefined(true))
    assert.equal(false, is.undefined(false))
    assert.equal(false, is.undefined(new Object()))
    assert.equal(false, is.undefined({}))
    assert.equal(false, is.undefined({foo:'bar'}))
    assert.equal(false, is.undefined(new Array()))
    assert.equal(false, is.undefined([]))
    assert.equal(false, is.undefined(""))
    assert.equal(false, is.undefined("   "))
    assert.equal(false, is.undefined("asdf"))
    assert.equal(false, is.undefined(1.23))
    assert.equal(false, is.undefined(-42))
    assert.equal(false, is.undefined(-1))
    assert.equal(false, is.undefined(0))
    assert.equal(false, is.undefined(666)) // :metal:
  })


})
