var assert = require('assert')
var is = require('../lib/is')
var fn = function(){}

describe('primitives', function(){

  it('array', function(){
    assert.equal(false, is.array(fn))
    assert.equal(false, is.array(new Date()))
    assert.equal(false, is.array(undefined))
    assert.equal(false, is.array(NaN))
    assert.equal(false, is.array(null))
    assert.equal(false, is.array(true))
    assert.equal(false, is.array(false))
    assert.equal(false, is.array(new Object()))
    assert.equal(false, is.array({}))
    assert.equal(false, is.array({foo:'bar'}))
    assert.equal(true , is.array(new Array()))
    assert.equal(true , is.array([]))
    assert.equal(false, is.array(""))
    assert.equal(false, is.array("   "))
    assert.equal(false, is.array("asdf"))
    assert.equal(false, is.array(1.23))
    assert.equal(false, is.array(-42))
    assert.equal(false, is.array(-1))
    assert.equal(false, is.array(0))
    assert.equal(false, is.array(666))
  })

  it('not.array', function(){
    assert.equal(true , is.not.array(fn))
    assert.equal(true , is.not.array(new Date()))
    assert.equal(true , is.not.array(undefined))
    assert.equal(true , is.not.array(NaN))
    assert.equal(true , is.not.array(null))
    assert.equal(true , is.not.array(true))
    assert.equal(true , is.not.array(false))
    assert.equal(true , is.not.array(new Object()))
    assert.equal(true , is.not.array({}))
    assert.equal(true , is.not.array({foo:'bar'}))
    assert.equal(false, is.not.array(new Array()))
    assert.equal(false, is.not.array([]))
    assert.equal(true , is.not.array(""))
    assert.equal(true , is.not.array("   "))
    assert.equal(true , is.not.array("asdf"))
    assert.equal(true , is.not.array(1.23))
    assert.equal(true , is.not.array(-42))
    assert.equal(true , is.not.array(-1))
    assert.equal(true , is.not.array(0))
    assert.equal(true , is.not.array(666))
  })

  it('arr', function(){
    assert.equal(false, is.arr(fn))
    assert.equal(false, is.arr(new Date()))
    assert.equal(false, is.arr(undefined))
    assert.equal(false, is.arr(NaN))
    assert.equal(false, is.arr(null))
    assert.equal(false, is.arr(true))
    assert.equal(false, is.arr(false))
    assert.equal(false, is.arr(new Object()))
    assert.equal(false, is.arr({}))
    assert.equal(false, is.arr({foo:'bar'}))
    assert.equal(true , is.arr(new Array()))
    assert.equal(true , is.arr([]))
    assert.equal(false, is.arr(""))
    assert.equal(false, is.arr("   "))
    assert.equal(false, is.arr("asdf"))
    assert.equal(false, is.arr(1.23))
    assert.equal(false, is.arr(-42))
    assert.equal(false, is.arr(-1))
    assert.equal(false, is.arr(0))
    assert.equal(false, is.arr(666))
  })

  it('not.arr', function(){
    assert.equal(true , is.not.arr(fn))
    assert.equal(true , is.not.arr(new Date()))
    assert.equal(true , is.not.arr(undefined))
    assert.equal(true , is.not.arr(NaN))
    assert.equal(true , is.not.arr(null))
    assert.equal(true , is.not.arr(true))
    assert.equal(true , is.not.arr(false))
    assert.equal(true , is.not.arr(new Object()))
    assert.equal(true , is.not.arr({}))
    assert.equal(true , is.not.arr({foo:'bar'}))
    assert.equal(false, is.not.arr(new Array()))
    assert.equal(false, is.not.arr([]))
    assert.equal(true , is.not.arr(""))
    assert.equal(true , is.not.arr("   "))
    assert.equal(true , is.not.arr("asdf"))
    assert.equal(true , is.not.arr(1.23))
    assert.equal(true , is.not.arr(-42))
    assert.equal(true , is.not.arr(-1))
    assert.equal(true , is.not.arr(0))
    assert.equal(true , is.not.arr(666))
  })

  it('boolean', function(){
    assert.equal(false, is.boolean(fn))
    assert.equal(false, is.boolean(new Date()))
    assert.equal(false, is.boolean(undefined))
    assert.equal(false, is.boolean(NaN))
    assert.equal(false, is.boolean(null))
    assert.equal(true,  is.boolean(true))
    assert.equal(true,  is.boolean(false))
    assert.equal(false, is.boolean(new Object()))
    assert.equal(false, is.boolean({}))
    assert.equal(false, is.boolean({foo:'bar'}))
    assert.equal(false, is.boolean(new Array()))
    assert.equal(false, is.boolean([]))
    assert.equal(false, is.boolean(""))
    assert.equal(false, is.boolean("   "))
    assert.equal(false, is.boolean("asdf"))
    assert.equal(false, is.boolean(1.23))
    assert.equal(false, is.boolean(-42))
    assert.equal(false, is.boolean(-1))
    assert.equal(false, is.boolean(0))
    assert.equal(false, is.boolean(666)) // :metal:
  })

  it('not.boolean', function(){
    assert.equal(true , is.not.boolean(fn))
    assert.equal(true , is.not.boolean(new Date()))
    assert.equal(true , is.not.boolean(undefined))
    assert.equal(true , is.not.boolean(NaN))
    assert.equal(true , is.not.boolean(null))
    assert.equal(false, is.not.boolean(true))
    assert.equal(false, is.not.boolean(false))
    assert.equal(true , is.not.boolean(new Object()))
    assert.equal(true , is.not.boolean({}))
    assert.equal(true , is.not.boolean({foo:'bar'}))
    assert.equal(true , is.not.boolean(new Array()))
    assert.equal(true , is.not.boolean([]))
    assert.equal(true , is.not.boolean(""))
    assert.equal(true , is.not.boolean("   "))
    assert.equal(true , is.not.boolean("asdf"))
    assert.equal(true , is.not.boolean(1.23))
    assert.equal(true , is.not.boolean(-42))
    assert.equal(true , is.not.boolean(-1))
    assert.equal(true , is.not.boolean(0))
    assert.equal(true , is.not.boolean(666)) // :metal:
  })

  it('bool', function(){
    assert.equal(false, is.bool(fn))
    assert.equal(false, is.bool(new Date()))
    assert.equal(false, is.bool(undefined))
    assert.equal(false, is.bool(NaN))
    assert.equal(false, is.bool(null))
    assert.equal(true,  is.bool(true))
    assert.equal(true,  is.bool(false))
    assert.equal(false, is.bool(new Object()))
    assert.equal(false, is.bool({}))
    assert.equal(false, is.bool({foo:'bar'}))
    assert.equal(false, is.bool(new Array()))
    assert.equal(false, is.bool([]))
    assert.equal(false, is.bool(""))
    assert.equal(false, is.bool("   "))
    assert.equal(false, is.bool("asdf"))
    assert.equal(false, is.bool(1.23))
    assert.equal(false, is.bool(-42))
    assert.equal(false, is.bool(-1))
    assert.equal(false, is.bool(0))
    assert.equal(false, is.bool(666)) // :metal:
  })

  it('not.bool', function(){
    assert.equal(true , is.not.bool(fn))
    assert.equal(true , is.not.bool(new Date()))
    assert.equal(true , is.not.bool(undefined))
    assert.equal(true , is.not.bool(NaN))
    assert.equal(true , is.not.bool(null))
    assert.equal(false, is.not.bool(true))
    assert.equal(false, is.not.bool(false))
    assert.equal(true , is.not.bool(new Object()))
    assert.equal(true , is.not.bool({}))
    assert.equal(true , is.not.bool({foo:'bar'}))
    assert.equal(true , is.not.bool(new Array()))
    assert.equal(true , is.not.bool([]))
    assert.equal(true , is.not.bool(""))
    assert.equal(true , is.not.bool("   "))
    assert.equal(true , is.not.bool("asdf"))
    assert.equal(true , is.not.bool(1.23))
    assert.equal(true , is.not.bool(-42))
    assert.equal(true , is.not.bool(-1))
    assert.equal(true , is.not.bool(0))
    assert.equal(true , is.not.bool(666)) // :metal:
  })

  it('func', function(){
    assert.equal(true , is.func(fn))
    assert.equal(false, is.func(new Date()))
    assert.equal(false, is.func(undefined))
    assert.equal(false, is.func(NaN))
    assert.equal(false, is.func(null))
    assert.equal(false, is.func(true))
    assert.equal(false, is.func(false))
    assert.equal(false, is.func(new Object()))
    assert.equal(false, is.func({}))
    assert.equal(false, is.func({foo:'bar'}))
    assert.equal(false, is.func(new Array()))
    assert.equal(false, is.func([]))
    assert.equal(false, is.func(""))
    assert.equal(false, is.func("   "))
    assert.equal(false, is.func("asdf"))
    assert.equal(false, is.func(1.23))
    assert.equal(false, is.func(-42))
    assert.equal(false, is.func(-1))
    assert.equal(false, is.func(0))
    assert.equal(false, is.func(666)) // :metal:
  })

  it('not.func', function(){
    assert.equal(false, is.not.func(fn))
    assert.equal(true , is.not.func(new Date()))
    assert.equal(true , is.not.func(undefined))
    assert.equal(true , is.not.func(NaN))
    assert.equal(true , is.not.func(null))
    assert.equal(true , is.not.func(true))
    assert.equal(true , is.not.func(false))
    assert.equal(true , is.not.func(new Object()))
    assert.equal(true , is.not.func({}))
    assert.equal(true , is.not.func({foo:'bar'}))
    assert.equal(true , is.not.func(new Array()))
    assert.equal(true , is.not.func([]))
    assert.equal(true , is.not.func(""))
    assert.equal(true , is.not.func("   "))
    assert.equal(true , is.not.func("asdf"))
    assert.equal(true , is.not.func(1.23))
    assert.equal(true , is.not.func(-42))
    assert.equal(true , is.not.func(-1))
    assert.equal(true , is.not.func(0))
    assert.equal(true , is.not.func(666)) // :metal:
  })

  it('nil', function(){
    assert.equal(false, is.nil(fn))
    assert.equal(false, is.nil(new Date()))
    assert.equal(false, is.nil(undefined))
    assert.equal(false, is.nil(NaN))
    assert.equal(true , is.nil(null))
    assert.equal(false, is.nil(true))
    assert.equal(false, is.nil(false))
    assert.equal(false, is.nil(new Object()))
    assert.equal(false, is.nil({}))
    assert.equal(false, is.nil({foo:'bar'}))
    assert.equal(false, is.nil(new Array()))
    assert.equal(false, is.nil([]))
    assert.equal(false, is.nil(""))
    assert.equal(false, is.nil("   "))
    assert.equal(false, is.nil("asdf"))
    assert.equal(false, is.nil(1.23))
    assert.equal(false, is.nil(-42))
    assert.equal(false, is.nil(-1))
    assert.equal(false, is.nil(0))
    assert.equal(false, is.nil(666)) // :metal:
  })

  it('not.nil', function(){
    assert.equal(true , is.not.nil(fn))
    assert.equal(true , is.not.nil(new Date()))
    assert.equal(true , is.not.nil(undefined))
    assert.equal(true , is.not.nil(NaN))
    assert.equal(false, is.not.nil(null))
    assert.equal(true , is.not.nil(true))
    assert.equal(true , is.not.nil(false))
    assert.equal(true , is.not.nil(new Object()))
    assert.equal(true , is.not.nil({}))
    assert.equal(true , is.not.nil({foo:'bar'}))
    assert.equal(true , is.not.nil(new Array()))
    assert.equal(true , is.not.nil([]))
    assert.equal(true , is.not.nil(""))
    assert.equal(true , is.not.nil("   "))
    assert.equal(true , is.not.nil("asdf"))
    assert.equal(true , is.not.nil(1.23))
    assert.equal(true , is.not.nil(-42))
    assert.equal(true , is.not.nil(-1))
    assert.equal(true , is.not.nil(0))
    assert.equal(true , is.not.nil(666)) // :metal:
  })

  it('undef', function(){
    assert.equal(false, is.undef(fn))
    assert.equal(false, is.undef(new Date()))
    assert.equal(true , is.undef(undefined))
    assert.equal(false, is.undef(NaN))
    assert.equal(false, is.undef(null))
    assert.equal(false, is.undef(true))
    assert.equal(false, is.undef(false))
    assert.equal(false, is.undef(new Object()))
    assert.equal(false, is.undef({}))
    assert.equal(false, is.undef({foo:'bar'}))
    assert.equal(false, is.undef(new Array()))
    assert.equal(false, is.undef([]))
    assert.equal(false, is.undef(""))
    assert.equal(false, is.undef("   "))
    assert.equal(false, is.undef("asdf"))
    assert.equal(false, is.undef(1.23))
    assert.equal(false, is.undef(-42))
    assert.equal(false, is.undef(-1))
    assert.equal(false, is.undef(0))
    assert.equal(false, is.undef(666)) // :metal:
  })

  it('undef', function(){
    assert.equal(true , is.not.undef(fn))
    assert.equal(true , is.not.undef(new Date()))
    assert.equal(false, is.not.undef(undefined))
    assert.equal(true , is.not.undef(NaN))
    assert.equal(true , is.not.undef(null))
    assert.equal(true , is.not.undef(true))
    assert.equal(true , is.not.undef(false))
    assert.equal(true , is.not.undef(new Object()))
    assert.equal(true , is.not.undef({}))
    assert.equal(true , is.not.undef({foo:'bar'}))
    assert.equal(true , is.not.undef(new Array()))
    assert.equal(true , is.not.undef([]))
    assert.equal(true , is.not.undef(""))
    assert.equal(true , is.not.undef("   "))
    assert.equal(true , is.not.undef("asdf"))
    assert.equal(true , is.not.undef(1.23))
    assert.equal(true , is.not.undef(-42))
    assert.equal(true , is.not.undef(-1))
    assert.equal(true , is.not.undef(0))
    assert.equal(true , is.not.undef(666)) // :metal:
  })

  it('present', function(){
    assert.equal(true , is.present(fn))
    assert.equal(true , is.present(new Date()))
    assert.equal(false, is.present(undefined))
    assert.equal(true , is.present(NaN))
    assert.equal(false, is.present(null))
    assert.equal(true , is.present(true))
    assert.equal(true , is.present(false))
    assert.equal(true , is.present(new Object()))
    assert.equal(true , is.present({}))
    assert.equal(true , is.present({foo:'bar'}))
    assert.equal(true , is.present(new Array()))
    assert.equal(true , is.present([]))
    assert.equal(false, is.present(""))
    assert.equal(false, is.present("   ")) // according to is, this is an empty string
    assert.equal(true , is.present("asdf"))
    assert.equal(true , is.present(1.23))
    assert.equal(true , is.present(-42))
    assert.equal(true , is.present(-1))
    assert.equal(true , is.present(0))
    assert.equal(true , is.present(666)) // :metal:

    assert.equal(false, is.present(is.toNum("asdf")))
    assert.equal(true , is.present(is.int("asdf"))) // NaN is technically "present"
    assert.equal(false, (is.present("asdf") && is.int("asdf"))) // this is probably how you'd do it, two checks, not one
  })

  it('not.present', function(){
    assert.equal(false, is.not.present(fn))
    assert.equal(false, is.not.present(new Date()))
    assert.equal(true , is.not.present(undefined))
    assert.equal(false, is.not.present(NaN))
    assert.equal(true , is.not.present(null))
    assert.equal(false, is.not.present(true))
    assert.equal(false, is.not.present(false))
    assert.equal(false, is.not.present(new Object()))
    assert.equal(false, is.not.present({}))
    assert.equal(false, is.not.present({foo:'bar'}))
    assert.equal(false, is.not.present(new Array()))
    assert.equal(false, is.not.present([]))
    assert.equal(true , is.not.present(""))
    assert.equal(true , is.not.present("   ")) // according to is, this is an empty string
    assert.equal(false, is.not.present("asdf"))
    assert.equal(false, is.not.present(1.23))
    assert.equal(false, is.not.present(-42))
    assert.equal(false, is.not.present(-1))
    assert.equal(false, is.not.present(0))
    assert.equal(false, is.not.present(666)) // :metal:

    assert.equal(true , is.not.present(is.toNum("asdf")))
    assert.equal(false, is.not.present(is.int("asdf"))) // NaN is technically "present"
    assert.equal(false, (is.not.present("asdf") && is.int("asdf"))) // this is probably how you'd do it, two checks, not one
  })

})
